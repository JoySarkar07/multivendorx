/**
 * External dependencies
 */
import React, { useState } from "react";

/**
 * Internal dependencies
 */
import "../styles/web/AutoGeneratedDefaultInput.scss";

// Types
type AutoGeneratedDefaultInputProps = {
    value: string;
    proSetting?: boolean;
    onChange: ( newValue: string ) => void;
    description?: string;
};

const AutoGeneratedDefaultInput: React.FC<
    AutoGeneratedDefaultInputProps
> = ( { value, proSetting, onChange, description } ) => {
    const [ copied, setCopied ] = useState< boolean >( false );

    const generateRandomKey = ( length: number = 8 ): string => {
        const characters =
            "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        let key = "";
        for ( let i = 0; i < length; i++ ) {
            const randomIndex = Math.floor( Math.random() * characters.length );
            key += characters.charAt( randomIndex );
        }
        return key;
    };

    const generateSSOKey = ( e: React.MouseEvent< HTMLButtonElement > ) => {
        e.preventDefault();
        const key = generateRandomKey( 8 );
        onChange( key );
    };

    const handleCopy = ( e: React.MouseEvent< HTMLButtonElement > ) => {
        e.preventDefault();
        navigator.clipboard.writeText( value ).then( () => {
            setCopied( true );
        } );

        setTimeout( () => {
            setCopied( false );
        }, 10000 );
    };

    const handleClear = ( e: React.MouseEvent< HTMLButtonElement > ) => {
        e.preventDefault();
        onChange( "" );
    };

    return (
        <>
            <div className="sso-key-section">
                <div className="input-section">
                    <input
                        type="text"
                        value={ value }
                        onChange={ ( e ) => onChange( e.target.value ) }
                    />
                    { value !== "" && (
                        <button onClick={ handleClear } className="clear-btn">
                            <i className="adminLib-delete"></i>
                        </button>
                    ) }
                </div>
                { value !== "" ? (
                    <button className="copy-btn" onClick={ handleCopy }>
                        <span className="svgIcon">
                            <i className="adminLib-vendor-form-copy"></i>
                            <span
                                className={
                                    ! copied ? "tooltip tool-clip" : "tooltip"
                                }
                            >
                                { ! copied ? (
                                    ""
                                ) : (
                                    <i className="adminLib-success-notification"></i>
                                ) }
                                { ! copied ? "Copy to clipboard" : "Copied" }
                            </span>
                        </span>
                    </button>
                ) : (
                    <button
                        className="btn-purple generate-btn"
                        onClick={ generateSSOKey }
                    >
                        <i className="adminLib-star_icon"></i>
                        <span className="text">{ "Generate" }</span>
                    </button>
                ) }
                { proSetting && <span className="admin-pro-tag">pro</span> }
            </div>
            { description && (
                <p
                    className="settings-metabox-description"
                    dangerouslySetInnerHTML={ { __html: description } }
                ></p>
            ) }
        </>
    );
};

export default AutoGeneratedDefaultInput;
